@page "/galleryPL"

@rendermode InteractiveServer

<body class="gallery-page">

    <div class="gallery-container">

        <div id="ImgButton" style="left:5vh; ">

            <button id="button-left" class="next-button" @onclick="Decrement" style="background-image: url('/Images/arrow-left.svg'); ">
            </button>

        </div>

        <div id="ImgButton" style="right:5vh;">

            <button id="button-right" class="next-button" @onclick=" Increment" style="background-image: url('/Images/arrow-right.svg'); ">
            </button>

        </div>

    </div>

    <div @onmouseover="ShowButtons" @onmouseout="HideButtons" class="fullscreen-container" style=" display: block; z-index:2; ">

        <img id="zdj0" class="fullscreen-image @(x == 0 ? "visible" : "hidden")" src="/Images/zdj0.jpg" alt="Obraz w proporcjach 16:9">
        <img id="zdj1" class="fullscreen-image @(x == 1 ? "visible" : "hidden")"  src="/Images/zdj1.jpg" alt="Obraz w proporcjach 16:9">
        <img id="zdj2" class="fullscreen-image @(x == 2 ? "visible" : "hidden")"  src="/Images/zdj2.jpg" alt="Obraz w proporcjach 16:9">
        <img id="zdj3" class="fullscreen-image @(x == 3 ? "visible" : "hidden")"  src="/Images/zdj3.jpg" alt="Obraz w proporcjach 16:9">
        <img id="zdj5" class="fullscreen-image @(x == 4 ? "visible" : "hidden")"  src="/Images/zdj4.jpg" alt="Obraz w proporcjach 16:9">
      

    </div>

    

</body>

<style>

    .gallery-page{
        height: calc(100vh - 85px);
        max-width: 100vw;
    }

    .gallery-container{
        transition: opacity 0.9s ease-in-out;
        width: 100%;
        position: absolute;
        display: flex;
        justify-content: space-between;
        left: 0px;
        top: 50%
    }

    .next-button{
        background-color: transparent;
        backdrop-filter: blur(10px);
        object-fit: contain;
        width: 100%;
        height: 100%;
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }


    .fullscreen-container {
        max-width: 100vw;
    width: 100px;
    height:100px;
    max-height:100vh;
        
        height: calc(100vh - 85px);
    }

    .fullscreen-image {
        max-width: 100vw;
    top: 0px;
    left: 0;
    width: 100%;
        height: calc(100vh - 80px);
    object-fit: fill; 
    transition: opacity 1s ease-in-out; 
    opacity: 0; 
    position: absolute;
    max-width: 100vw;
        margin-top: 80px;
    }

    

            #ImgButton{
        z-index: 2;
        background-color: transparent;
        position: relative;
        height: 10vw;
        width: 10vw;
    }



    .visible {
    opacity: 1; 
    }

    .hidden {
    opacity: 0; 
    }


</style>

@code {
    private int x = 0;
    private int y = 0;
    private bool showButtons = false;

    private void Increment()

    {
        y = 1;
        x++;
        if (x > 3) { x = 0; }
        timer.Stop();
        timer.Start();
    }
    private void Decrement()
    {
        y = 1;
        x--;
        if (x < 0) { x = 3; }
        timer.Stop();
        timer.Start();
    }


    private Timer timer;

    protected override void OnInitialized()
    {
        timer = new Timer(10000);
        timer.Elapsed += (sender, args) =>
        {
            y = 0;
            x++;
            if (x > 3) { x = 0; }
            
            InvokeAsync(StateHasChanged);
        };
        timer.Start();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }

    private void ShowButtons()
    {
        showButtons = true;
        InvokeAsync(StateHasChanged);
    }

    private void HideButtons()
    {
        showButtons = false;
        InvokeAsync(StateHasChanged);
    }


}

