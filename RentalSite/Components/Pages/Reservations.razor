@page "/Reservations"

@rendermode InteractiveServer

@inject Data.AppDbContext dbContext
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Reservations</PageTitle>

<body id="bodyy" style="width: 100%; height: 100%;">
    <EditForm Model="@newPerson" OnValidSubmit="SubmitForm" id="EditForm" style="margin-top:10px;">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label for="fname">Imię:</label><br>
            <InputText id="fname" @bind-Value="newPerson.Name" class="form-control" />
            <ValidationMessage For="@(() => newPerson.Name)" />
        </div>

        <div class="form-group">
            <label for="lname">Nazwisko:</label><br>
            <InputText id="lname" @bind-Value="newPerson.Lastname" class="form-control" />
            <ValidationMessage For="@(() => newPerson.Lastname)" />
        </div>

        <div class="form-group">
            <label for="PhoneNumberPrefix">Numer kierunkowy:</label><br>
            <InputSelect id="PhoneNumberPrefix" @bind-Value="newPerson.PhoneNumberPrefix" class="form-control">
                <option value="+1">+1 (USA)</option>
                <option value="+44">+44 (UK)</option>
                <option value="+48">+48 (Polska)</option>
                <option value="+49">+49 (Niemcy)</option>
                <option value="+61">+61 (Australia)</option>
                <option value="+81">+81 (Japonia)</option>
                <option value="+86">+86 (Chiny)</option>
            </InputSelect>
            <ValidationMessage For="@(() => newPerson.PhoneNumberPrefix)" />
        </div>

        <div class="form-group">
            <label for="PhoneNumber">Numer telefonu:</label><br>

            <input type="text" id="PhoneNumber" @bind="newPerson.PhoneNumber" maxlength="9" class="form-control" />

            <ValidationMessage For="@(() => newPerson.PhoneNumber)" />
        </div>

        <div class="form-group">
            <label for="Email">Email:</label><br>
            <InputText id="Email" @bind-Value="newPerson.Email" class="form-control" />
            <ValidationMessage For="@(() => newPerson.Email)" />
        </div>



        <div class="form-group">
            <label for=" ReservationFrom ">Rezerwacja od:</label><br>
            <InputDate id="ReservationFrom" @bind-Value="LocalReservationFrom" class="form-control"></InputDate>

        </div>


        <div class="form-group">
            <label for=" ReservationFrom ">Rezerwacja do:</label><br>
            <InputDate id="ReservationFrom" @bind-Value="LocalReservationTo" class="form-control"></InputDate>

        </div>






        <div class="btn-block" style="">
            <button type="submit" class="button btn btn-primary" style="background:#fb8500; ">Wyślij</button>
        </div>
    </EditForm>

    @if (saved)
    {
        <p style="font-size: 100px">Rezerwacja dodana do bazy danych </p>
    }
    @if (error)
    {
        <div style="font-size: 18px; color: red; border: 1px solid red; padding: 10px; border-radius: 5px;">
            Nie udało się dodać rezerwacji do bazy danych. Spróboj ponownie później @errorMessage.
        </div>
    }
</body>

@code {
    private Person newPerson = new Person();
    private bool saved = false;
    private bool error = false;
    private string errorMessage = string.Empty;
    private DateTime LocalReservationFrom = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
    private DateTime LocalReservationTo = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);



    


    private async Task SubmitForm()

    {
        saved = false;
        error = false;

        try
        {
           

            


           
            dbContext.Guests.Add(newPerson);
            await dbContext.SaveChangesAsync();

            // Tworzymy nową rezerwację
            var newReservation = new Reservation
                {
                    GuestID = newPerson.GuestID,
                    Name = newPerson.Name,
                    Lastname = newPerson.Lastname,
                    Email = newPerson.Email,
                    PhoneNumberPrefix = newPerson.PhoneNumberPrefix,
                    PhoneNumber = newPerson.PhoneNumber,
                    ReservationDate = DateTime.Now,
                    Paid = false,
                    ReservationTo = LocalReservationTo,
                    ReservationFrom = LocalReservationFrom
                };

           
            dbContext.NewReservations.Add(newReservation);
            await dbContext.SaveChangesAsync();

            newPerson = new Person();
            saved = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}\nInner Exception: {ex.InnerException?.Message}\nStackTrace: {ex.StackTrace}";
            error = true;
        }
    }
}

<style>
    #bodyy{
        height: calc(100vh - 85px);
        max-width: 100vw;
    }
    #EditForm{
        width: 100%;
        padding: 20px;
        border-radius: 6px;
        background: #fff;
        box-shadow: 0 0 10px 0 #fb8500;
    }

    .btn-block {
        margin-top: 10px;
        text-align: center;
    }

    btn {
        width: 150px;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background: #fb8500;
        font-size: 16px;
        color: #fff;
        cursor: pointer;
    }

        btn:hover {
            /* background: #ff0066; */
            background: #fb8500;
        }

    .form-control {
        max-width: 100%;
        width: auto;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

</style>
